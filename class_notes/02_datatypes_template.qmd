---
title: "Data types in R"
author: "Greg Wray"
format: 
  html:
      embed-resources: true
editor: source
date: today
date-format: iso
---

## Set up

Load the tidyverse package and the `penguins.csv` dataset:

```{r include = FALSE}
library(tidyverse)
penguins <- read_csv("penguins.csv")
```

## Basic data types

R provides six basic data types: **Integer**: stores whole numbers. **Double**: stores floating point numbers. The term "double" is short for double-precision, which means that twice as much memory is allocated to store extra decimal places. **Character**: stores strings, which are vectors of individual letters, spaces, and punctuation marks. **Logical**: stores `TRUE` and `FALSE` values; these are called Boolean in many other computing languages. **Complex**: holds complex numbers with a real part and an imaginary part (i). **Raw**: holds `0`s and `1`s without any implied meaning.

The first four data types are used very commonly, while the last two are rarely needed.

**Creating basic data objects.** 

```{r}


```


**Basic data types are vectors.** Most programming languages have **atomic** data types, which are single values of a particular type, such as an integer or a string. R is unusual in that there are no true atomic data types; instead, the most basic data types are **vectors**: sequences of values of the same type.

```{r}


```


## Data structures

Most programming languages provide ways to organize information into packages that make working with data easier and safer. These packages are called **data structures**. Examples include vectors and data frames. Behind the scenes, R organizes your data in a way that speeds up calculations and minimizes memory usage, while retaining the ability to present values back to you in human-readable form. A data structure also contains rules that govern what kinds of operations are allowed. If you try to break one of those rules, R will give you an error message.  

R provides several fundamental data structures. A **vector** is the simplest: as mentioned earlier, it contains a series of values of a single data type. An **array** is similar but extends values in two dimensions, while a **matrix** holds values of a single type in three or more dimensions. A **list** is a 1-dimensional data structure that can hold values of different types and even other data structures. A **data frame** is a table with multiple, equal-length columns, each of which can be a different data type but each containing only one data type.   

**Array.** 

```{r}


```

**List.** 

```{r}


```

**Data Frame.** 

```{r}


```


## Indexing data structures

You will often want to access specific values within a data object. This process is called **indexing**. 

**Indexing vectors.** 

```{r}


```

**Indexing arrays.** 

```{r}


```

**Indexing data frames.** 

```{r}


```


## Data objects and metadata

In R, there is no such thing as "just" data; values are always stored with additional information, called **metadata** or **attributes**. Data and its associated metadata are stored together in memory in a package called a **data object**.

```{r}


```


## Assignment

Assignment is one of the most common operations in writing code. Your work in R will go more smoothly if you keep in mind the following basic concepts about assignment.

**1. Data type is inferred during assignment.** 

```{r}


```

**2. Assignment recycles or drops values if dimensions do not match.** 

```{r}


```
 
**3. Reassignment overwrites the previous value.** 

```{r}


```

**4. The RHS is fully evaluated before assignment happens.** 

```{r}


```

**5. Indexing can be used on either or both sides during assignment.** 

```{r}


```


## Data type coercion

R allows you to change the type of a variable *after* assignment, but only if it makes sense. This is known as **coercion** in R documentation (most programming languages call this **casting**). You can also coerce data type during assignment.

```{r}


```


## Missing values

R uses the special value `NA` to represent missing data (the name is short for "not available"). 

```{r}


```



## Vectorized operations

R allows you to apply an operator or function to a vector, array, or column within a data frame in a single step. This avoids the need to set up a loop to process each item individually. This is called **vectorization**, and it is an important element of the **functional programming paradigm** (more on this later). 

```{r}

```

